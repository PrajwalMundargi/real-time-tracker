<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
    integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin=""/>
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
    integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine@3.2.12/dist/leaflet-routing-machine.css" />
    <script src="https://unpkg.com/leaflet-routing-machine@3.2.12/dist/leaflet-routing-machine.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <style>
        #map {
            height: 100vh;
        }
    </style>
    <title>Real-Time Tracker</title>
</head>
<body>
    <div id="map"></div>
    <script>
        var map = L.map('map').setView([51.505, -0.09], 13);

        L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        }).addTo(map);

        var socket = io();
        var markers = {};
        var userMarker, routeControl;
        var trackedClientId = null;

        socket.on('receive-location', function(data) {
            console.log('Received location:', data);
            const { id, latitude, longitude } = data;
            if (markers[id]) {
                markers[id].setLatLng([latitude, longitude]);
            } else {
                markers[id] = L.marker([latitude, longitude]).addTo(map);
            }

            if (trackedClientId === id) {
                if (routeControl) {
                    routeControl.spliceWaypoints(1, 1, L.latLng(latitude, longitude));
                }
            }
        });

        socket.on('user disconnected', function(id) {
            console.log('User disconnected:', id);
            if (markers[id]) {
                map.removeLayer(markers[id]);
                delete markers[id];
            }
        });

        if (navigator.geolocation) {
            navigator.geolocation.watchPosition(
                (position) => {
                    const { latitude, longitude } = position.coords;
                    console.log('Sending location:', { latitude, longitude });
                    socket.emit('send-location', { latitude, longitude });

                    if (userMarker) {
                        userMarker.setLatLng([latitude, longitude]);
                    } else {
                        userMarker = L.marker([latitude, longitude]).addTo(map);
                    }

                    if (!routeControl) {
                        routeControl = L.Routing.control({
                            waypoints: [
                                L.latLng(latitude, longitude),
                                L.latLng(latitude, longitude)
                            ]
                        }).addTo(map);
                    } else {
                        routeControl.spliceWaypoints(0, 1, L.latLng(latitude, longitude));
                    }

                    if (trackedClientId && markers[trackedClientId]) {
                        const trackedMarker = markers[trackedClientId];
                        routeControl.spliceWaypoints(1, 1, trackedMarker.getLatLng());
                    }
                },
                (error) => {
                    console.error(error);
                },
                {
                    accuracy:true,
                    timeout: 5000,
                    maximumAge: 0
                }
            );
        }

        function trackClient(clientId) {
            trackedClientId = clientId;
            if (markers[clientId]) {
                const trackedMarker = markers[clientId];
                if (routeControl) {
                    routeControl.spliceWaypoints(1, 1, trackedMarker.getLatLng());
                }
            }
        }

        socket.on('receive-location', function(data) {
            if (!trackedClientId && data.id !== socket.id) {
                trackClient(data.id);
            }
        });
    </script>
</body>
</html>
